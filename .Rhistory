#emission speaking [/cm³]
emission_speaking <- 0.6
#speaking / breathing ratio
speaking_breathing_rat <- 0.1
#respiratory rate [l/min]
resp_rate <- 10
#respiratory fluid RNA conc [/cm³]
resp_fluid_RNA_conc <- 500000000
#mean wet aerosol diameter [um]
mean_aer_dia <- 5
#infectious episode [d] *
inf_epis <- 2
#virus lifetime in aerosol [h]
vir_life <- 1.7
if (input$distance == "k1m") {
num_people <- 30
} else if (input$distance == "z1u15") {
num_people <- 12
} else if (input$distance == "m1m") {
num_people <- 9
}
num_people <- 12
#Room Area in m square based on num people
room_area <- 30
#room height [m]** ** Very large room sizes violate the assumption of instantaneaous mixing of the air
room_height <- 3
#infection probability [/RNA] calculated with RNA_num
infect_prob <- function(RNA_num) {
return (1 - 10 ^ (log10(0.5) / RNA_num))
}
var_infect_prob <- 1 - 10 ^ (log10(0.5) / RNA_num)
#RNA content in aerosol
RNA_content <- function(resp_fluid_RNA_conc,
mean_aer_dia) {
return (resp_fluid_RNA_conc * pi / 6 * (mean_aer_dia / 10000) ^ 3)
}
var_RNA_content <-
(resp_fluid_RNA_conc * pi / 6 * (mean_aer_dia / 10000) ^ 3)
#aerosol emission [/h]
aero_emission <-
function(emission_breathing,
emission_speaking,
speaking_breathing_rat,
resp_rate) {
return ((
emission_breathing * (1 - speaking_breathing_rat) + emission_speaking *
speaking_breathing_rat
) * 1000 * resp_rate * 60
)
}
var_aero_emission <-
aero_emission(emission_breathing,
emission_speaking,
speaking_breathing_rat,
resp_rate)
#aerosol conc [/l]
aero_conc <-
function(var_aero_emission,
room_area,
room_height) {
return (var_aero_emission / (room_area * room_height * 1000))
}
var_aero_conc <- aero_conc(var_aero_emission,
room_area,
room_height)
#RNA cont. aerosol conc [/l]
RNA_cont_aero_conc <- var_aero_conc * var_RNA_content
var_RNA_cont_aero_conc <-
var_aero_conc * var_RNA_content
#RNA dosis [/h]
RNA_dosis <-
function(var_RNA_cont_aero_conc,
resp_rate,
deposition_prob) {
return(var_RNA_cont_aero_conc * resp_rate * deposition_prob * 60)
}
var_RNA_dosis <- RNA_dosis(var_RNA_cont_aero_conc,
resp_rate,
deposition_prob)
#room ventilation rate [/h]
#Normally generated through user input
if (input$air == "NoAir") {
room_vent_rate <- 0
} else if (input$air == "FensterGekippt") {
room_vent_rate <- 0.35
} else if (input$air == "Stoßlueften") {
room_vent_rate <- 2
} else if (input$air == "Lueftungssystem") {
room_vent_rate <- 9
}
#total mask efficiency (exhaling + inhaling)
total_mask_effic <-
0 #Normally generated through user input
if (input$masks == "No") {
total_mask_effic <- 0
} else if (input$masks == "AT") {
total_mask_effic <- 0.35 #ACHTUNG Wert erfunden! Hier ggf. nachsehen
} else if (input$masks == "OP") {
total_mask_effic <- 0.7
} else if (input$masks == "FFP2") {
total_mask_effic <- 0.95
}
#Das macht aus meiner Sicht keinen Sinn aber funktioniert lustiger weise (quasi falsch herum?)
if (input$masks_dur == "NieMask") {
total_mask_effic = total_mask_effic * 0
} else if (input$masks_dur == "GelMask") {
total_mask_effic = total_mask_effic * 0.3
} else if (input$masks_dur == "HalfMask") {
total_mask_effic = total_mask_effic * 0.6
} else if (input$masks_dur == "ImmerMask") {
total_mask_effic = total_mask_effic * 1
}
#Normally generated through user input
#dosis 6 hours (per  day)*
dosis_6_hours <-
var_RNA_dosis / (room_vent_rate + 1 / vir_life) * (1 - total_mask_effic) *
6
#dosis infectious episode
dosis_infectious_episode <- dosis_6_hours * inf_epis
#infection risk of individual person [% / episode]
infect_risk_individual <-
(1 - (1 - var_infect_prob) ^ dosis_infectious_episode) * 100
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='fau-erl-nue', token='C4C6D39B6531E5AE28F944B0A52708F6', secret='FQ3hc7iXUqgrlruHsMOApt4AMc7npUFsgVX2qtl8')
rsconnect::setAccountInfo(name='fau-erl-nue', token='C4C6D39B6531E5AE28F944B0A52708F6', secret='FQ3hc7iXUqgrlruHsMOApt4AMc7npUFsgVX2qtl8')
runApp()
library(rsconnect)
rsconnect::deployApp('C:\Users\yd95ubyl\Documents\Research\covid19_simulation\app.R')
library(rsconnect)
rsconnect::deployApp('C:/Users/yd95ubyl/Documents/Research/covid19_simulation/app.R')
rsconnect::deployApp('C:/Users/yd95ubyl/Documents/Research/covid19_simulation/')
library(rsconnect)
rsconnect::deployApp('C:/Users/yd95ubyl/Documents/Research/covid19_simulation')
setwd("~/Research/covid19_simulation")
library(rsconnect)
rsconnect::deployApp(getwd())
rsconnect::setAccountInfo(name='fau-erl-nue',
token='C4C6D39B6531E5AE28F944B0A52708F6',
secret='<SECRET>')
library(rsconnect)
rsconnect::deployApp(getwd())
rsconnect::setAccountInfo(name='fau-erl-nue',
token='C4C6D39B6531E5AE28F944B0A52708F6',
secret='FQ3hc7iXUqgrlruHsMOApt4AMc7npUFsgVX2qtl8')
library(rsconnect)
rsconnect::deployApp(getwd())
library(rsconnect)
rsconnect::setAccountInfo(name='fau-erl-nue',
token='C4C6D39B6531E5AE28F944B0A52708F6',
secret='FQ3hc7iXUqgrlruHsMOApt4AMc7npUFsgVX2qtl8')
rsconnect::deployApp(getwd())
rsconnect::showLogs()
rsconnect::setAccountInfo(name='fau-erl-nue', token='C4C6D39B6531E5AE28F944B0A52708F6', secret='FQ3hc7iXUqgrlruHsMOApt4AMc7npUFsgVX2qtl8')
rsconnect::setAccountInfo(name='fau-erl-nue', token='C4C6D39B6531E5AE28F944B0A52708F6', secret='FQ3hc7iXUqgrlruHsMOApt4AMc7npUFsgVX2qtl8')
rsconnect::deployApp(getwd())
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
setwd("~/Research/covid19_simulation")
shiny::runApp()
runApp()
runApp()
runApp()
runApp('~/R/test')
runApp('~/R/test')
runApp('~/R/test')
runApp()
runApp('~/R/test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/test')
runApp('~/Research/covid19_simulation')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp('~/R/tr')
runApp('~/R/tr')
runApp('~/R/tr')
i <- navbarPage('Test App',id = "inTabset",
tabPanel(title = "Panel 1", value = "panel1",
actionButton('jumpToP2', 'Jump to Second Tab')),
tabPanel(title = "Panel 2", value = "panel2",
actionButton('jumpToP1', 'Jump to First Tab'))
)
server <- function(input, output, session) {
observeEvent(input$jumpToP2, {
updateTabsetPanel(session, "inTabset",
selected = "panel2")
})
observeEvent(input$jumpToP1, {
updateTabsetPanel(session, "inTabset",
selected = "panel1")
})
}
shinyApp(ui, server)
runApp('~/R/test2')
runApp('~/Research/covid19_simulation')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Research/covid19_simulation")
rsconnect::setAccountInfo(name = 'fau-erl-nue',
token = 'C4C6D39B6531E5AE28F944B0A52708F6',
secret = 'C4C6D39B6531E5AE28F944B0A52708F6')
rsconnect::deployApp(getwd())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name = 'fau-erl-nue',
token = 'C4C6D39B6531E5AE28F944B0A52708F6',
secret = 'SECRET')
rsconnect::deployApp(getwd())
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='fau-erl-nue',
token='C4C6D39B6531E5AE28F944B0A52708F6',
secret='FQ3hc7iXUqgrlruHsMOApt4AMc7npUFsgVX2qtl8')
rsconnect::deployApp(getwd())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Research/covid19_simulation")
runApp()
runApp()
setwd("~/Research/covid19_simulation")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/testest')
runApp('~/R/testest')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/testest')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/testest')
runApp('~/R/testest')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/test2')
runApp('~/Research/covid19_simulation')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(pngs)
View(asGrobs)
View(pngs)
View(asGrobs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
